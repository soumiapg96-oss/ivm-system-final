version: '3.8'

services:
  api:
    build: .
    container_name: inventory-api-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=inventory_db
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - JWT_EXPIRES_IN=15m
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - .:/app
      - /app/node_modules
    networks:
      - inventory-network
    restart: unless-stopped

  frontend:
    build: 
      context: ./inventory-frontend
      dockerfile: Dockerfile.dev
    container_name: inventory-frontend-dev
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000/api
    depends_on:
      - api
    volumes:
      - ./inventory-frontend:/app
      - /app/node_modules
    networks:
      - inventory-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: inventory-postgres-dev
    environment:
      - POSTGRES_DB=inventory_db
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=inventory_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: inventory-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - inventory-network
    restart: unless-stopped

volumes:
  postgres_data_dev:

networks:
  inventory-network:
    driver: bridge
